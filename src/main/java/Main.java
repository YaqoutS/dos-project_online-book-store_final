import static spark.Spark.*;

import com.google.gson.Gson;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

public class Main {

	private static Gson gson = new Gson();

	//private static ArrayList<Order> orders = new ArrayList<Order>();
	
	public static void connect() {
		Connection conn = null;
		try {
			// DB path
			String url = "jdbc:sqlite:orderserver.db";

			// SQL statement for creating the orders table if it isn't exist
			String sql = "CREATE TABLE IF NOT EXISTS orders (\n" 
			        + "	orderID INTEGER PRIMARY KEY,\n"
					+ "	bookID INT NOT NULL\n"
					+ ");";

			// create a connection to the database
			conn = DriverManager.getConnection(url);
			System.out.println("Connection to SQLite has been established.");

			Statement stmt = conn.createStatement();

			// create a new table
			stmt.execute(sql);

			// close the connection with the DB
			conn.close();
		} catch (SQLException e) {
			System.out.println("Error in connect fun: " + e.getMessage());
		}
	}
	
	public static Order addNewOrder(int bookID) {
		
		Connection conn = null;
		
		Order order = new Order();
				
		try {
			// DB path
			String url = "jdbc:sqlite:orderserver.db";			

			// the insert query
			String SQLquery = "insert into orders (bookID) values('" + bookID + "');";
			
			// create a connection to the database
			conn = DriverManager.getConnection(url);

			Statement stmt = conn.createStatement();
			
			// create new order
			stmt.executeUpdate(SQLquery);
			
			// query to select the last added order to get its ID which generated by the SQLite
			SQLquery = "SELECT * from orders order by orderID desc limit 1";
			
			ResultSet result = stmt.executeQuery(SQLquery);
			
			if (result.next()) {
				// extract the ID of the order added to the DB
				order.setOrderID(result.getInt("orderID"));
			    order.setBookID(result.getInt("bookID"));
	        } else {
	        	return null;
	        }

			conn.close();
		} catch (SQLException e) {
			System.out.println("Error in add fun: " + e.getMessage());
		}
		
		System.out.println("");
		// return the ID of the added order
		return order;
	}
	
	private static void synchronizeOrderWithPrimary(Order order) {
        // URL of the synchronization API on the primary server
        String apiUrl = "http://localhost:4567/sync-order";

        try {
            // Convert the Order object to JSON
            Gson gson = new Gson();
            String orderJson = gson.toJson(order);

            // Open a connection to the secondary server
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            
            // Set the request method and headers
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            // Write the JSON data to the request body
            try (OutputStream os = connection.getOutputStream()) {
                byte[] input = orderJson.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Extract the response code
            int responseCode = connection.getResponseCode();

            // Check if the synchronization was successful
            if (responseCode == HttpURLConnection.HTTP_OK) {
                System.out.println("Order synchronized with the secondary server.");
            } else {
                System.out.println("Failed to synchronize order with the secondary server. Response Code: " + responseCode);
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error calling the synchronization API.");
        }
    }
	
	public static void main(String[] args) {
		
		port(4566);
		
		// connect to the DB
		connect();
		
		// the purchase API
		post("/purchase/:bookId", (req, res) -> {
			System.out.println("Inside primary order server / purchase API");
			
			// extract the 'bookID' value from the URL
			String requestId = req.params(":bookID");
			
			Book book = new Book();
					    
			try {
	            // URL of the info API we want to call
	            String apiUrl = "http://localhost:4569/info/" + requestId;

	            // open a connection to the info API
	            URL url = new URL(apiUrl);
	            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	            connection.setRequestMethod("GET");

	            // extract the response code
	            int responseCode = connection.getResponseCode();

	            // check if the response code indicates not found (HTTP 404 OK)
	            if (responseCode == HttpURLConnection.HTTP_NOT_FOUND) {
	            	return "There is no book with ID = " + requestId;
	            }
	            
	            // read the info API response
	            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	            StringBuilder responseStringBuilder = new StringBuilder();
	            String line;
	            while ((line = reader.readLine()) != null) {
	                responseStringBuilder.append(line);
	            }
	            reader.close();

	            // get the response as a string
	            String apiResponse = responseStringBuilder.toString();

	            // converting the response to a book object
	            book = gson.fromJson(apiResponse, Book.class);
	            
	            // check if the quantity is zero
	            if(book.getQuantity() <= 0) {
	            	return "The item is out of stock";
	            }
	            
	            // URL of the dec API that will be called to decrement the quantity
	            apiUrl = "http://localhost:4569/dec/" + book.getId();
	            url = new URL(apiUrl);
	            connection = (HttpURLConnection) url.openConnection();
	            connection.setRequestMethod("PUT");

	            // extract the response code
	            int responseCode2 = connection.getResponseCode();

	            // Read the response content
	            BufferedReader reader2 = new BufferedReader(new InputStreamReader(connection.getInputStream())); 
	            StringBuilder response = new StringBuilder();
	            String line2;
	            while ((line2 = reader2.readLine()) != null) {
	                response.append(line2);
	            }
	            reader2.close();	            
	            
	            // add the order to the DB
	            Order order = addNewOrder(book.getId());
	            System.out.println("From addNewOrder fun" + order);
	            
	            // if the order isn't added successfully
	            if(order == null) {
	            	return "Request failed";
	            }
	            
	            synchronizeOrderWithPrimary(order);
	            // return the id of the created order
	            return "Purchase done successfully! \nThe order id = " + order.getOrderID();
	            
	        } catch (IOException e) {
	            e.printStackTrace();
	            res.status(500); // Internal Server Error
	            return "Error calling the API";
	        }
		});
		
		post("/sync-order", (req, res) -> {
            try {
                // Parse the JSON data from the request body
                Gson gson = new Gson();
                Order receivedOrder = gson.fromJson(req.body(), Order.class);
                System.out.println("ReceivedOrder " + receivedOrder);

                // Perform synchronization logic here
                Connection conn = null;
        		        		
        		try {
        			// DB path
        			String databaseUrl = "jdbc:sqlite:orderserver.db";			

        			// the insert query
        			String SQLquery = "insert into orders values(" + receivedOrder.getOrderID() + ", " + receivedOrder.getBookID() + ");";
        			
        			// create a connection to the database
        			conn = DriverManager.getConnection(databaseUrl);

        			Statement stmt = conn.createStatement();
        			
        			// create new order
        			stmt.executeUpdate(SQLquery);
        			
        			String apiUrl = "http://localhost:4569/dec/" + receivedOrder.getBookID();
    	            URL url = new URL(apiUrl);
    	            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    	            connection.setRequestMethod("PUT");

    	            // extract the response code
    	            int responseCode2 = connection.getResponseCode();

    	            // Read the response content
    	            BufferedReader reader2 = new BufferedReader(new InputStreamReader(connection.getInputStream())); 
    	            StringBuilder response = new StringBuilder();
    	            String line2;
    	            while ((line2 = reader2.readLine()) != null) {
    	                response.append(line2);
    	            }
    	            System.out.println("Dec from sync-order API / secondary server " + response);
    	            reader2.close();	 
        			
        			conn.close();
        		} catch (SQLException e) {
        			e.printStackTrace();
        			System.out.println("Error in add fun: " + e.getMessage());
        			return "Error in add fun";
        		}

                // Respond with a success message
                return "Order synchronized successfully with the secondary server.";
                
            } catch (Exception e) {
                e.printStackTrace();
                res.status(500); // Internal Server Error
                return "Error processing synchronization request.";
            }
        });
	}
}
